/// ////////////////// ///
/// LQL Spécifications ///
/// ////////////////// ///


/// //////////// ///
/// Introduction ///
/// //////////// ///


Le LQL, ou encore, L.ambda Q.uery L.anguage est le langage
fonctionnel par excellence. En effet, son but est de
proposer un mécanisme simple afin de mettre en place des
fonctionnalités lisilbles, maintenables et utilisables
par le plus grand nombre, même par les non initiés à l'
informatique théorique.

Reposant, une théorie fondatrice des mathématiques, le
lambda calcul, ce langage permet d'exprimer dans le
langage le plus complet connu (les mathématiques), tout
ce que l'on peut désirer en termes de traitement automatiques


/// ///////////////////////////// ///
/// Lambda termes et abstractions ///
/// ///////////////////////////// ///


Le lambda calcul se sert de trois notions pour écrire les
expressions qui seront à évaluer :
 - Les lammbda termes
 - Les abstractions (qui sont aussi des lambda termes)
 - Le parenthésage (qui sont aussi des lambda termes)

Les LAMBDA TERMES sont de simples alias de fonction et de
paramêtres de fonction.
Une ABSTRACTION est l'écriture formelle d'un lambda termes.
Et enfin, le PARENTHESAGE est le mécanisme permettant d'établir
un ordre d'évaluation des lambda expressions.

Exemple :
        a : lambda terme
        n : lambda terme
        x, f, ..... : tous des lambdas termes.

        !f x.f x : abstraction
        !m n f x.m f(n f x) : abstraction
        ....

Nous pouvons retenir :
     lambda terme = alias ou abstraction ou parenthèses.

Une ABSTRACTION se présente en deux parties :
 - La signature
 - L'expression

La SIGNATURE est l'empreinte d'utilisation de l'alias.
Elle commence par le caractère '!' suivi d'un ensemble de
paramêtres (alias) séparés par des ' '. La signature permet
de montrer l'ordre dans lequel il faut poser les paramêtres
de la fonction. Attention dans la plupart des cas,
l'utilisation d'un alias avec les paramêtres pas dans le
bon ordre entrainera des résultats fort différents de ceux
attendu !!!

Conseil :
        Veiller à ce que les noms des paramêtres soient
        significatifs de leur nature et de celle de la
        fonction (dont l'alias doit porter la majorité de
        sa sémantique !!!)

L'EXPRESSION montre la manière dont le résultat de
l'application de l'alias sur ces paramêtres est obtenu.
L'expression est une liste de lambda termes ni plus, ni
moins.


Le parenthéseage est une manière de lever l'ambiguité de
l'ordre d'évaluation dans le lambda calcul. Par convention
l'expression  : x y z, s'évalue de gauche à droite et est
donc équivalente à ((x y) z). Le parenthèsage sera donc
utilisé dans le cas où l'on veut imposer un ordre différent
d'évaluation que celui proposer par la convention l2r (left
to right).

Exemple :
        x (y (z n m) h (k l)).
        On voit très clairement dans cette lambda expression
        que l'ordre d'évaluation n'est pas le l2r.


Nous voyons donc qu'une lambda expression mélée de parenthèsage
peut tout à fait être utilisée pour définir un nouvel alias.

Exemple :
        !x f.f x (f (x f) x x) x f x x (Expression qui ne signifie
        rien en l'état !!!)


Nous aurons noté l'utilisation d'un '.' entre la signature et
l'expression. C'est en quelque sorte le point de passage entre
l'un et l'autre (manière de séparation). On pourrait envisager
l'utilisation de '->' ou tout autres symboles ayant un sens
commun similaire ('=>', '|', '>>', ...).
Ce symbole n'apporte pas de sémantique propre et peut donc être
remplacer par un autre sans rien impacter.


/// ////////////////////////////// ///
/// Les ordinaux et la composition ///
/// ////////////////////////////// ///


Les ordinaux sont des nombres un peu particuliers. Ils servent
à déterminer l'ordre d'une fonction ou plus précisement, elle
donne le nombre de fois qu'une fonction est appliquée en oignon
sur un terme.

Exemple :
        Dans l'expression !fx.x l'ordre est de ord0
        Dans l'expression !fx.fx l'ordre est de ord1
        Dans l'expression !fx.f(fx) l'ordre est de ord2
        ...

Dans un soucis de lisibilité, on introduit l'opérateur de
composition récursif : "^". Il s'utilise avec les ordinaux et
symbolise de manière condensée, les expressions de composition
précédente.

Exemple :
        !fx.x <=> !fx.f^ord0 x (peut d'intérêt dans cas-ci!)
        !fx.f(f(f(f(f(f(x)))))) <=> !fx.f^ord6 x (beaucoup plus là !)
        ...

Nous avons donc maintenant un opérateur permettant de condenser
des écritures qui pourraient être vite très lourdes.

Remarquons aussi l'écriture peu naturelle des ordinaux : ord<n>
avec n étant l'entier habituel symbole de quantité. Le préfixe
'ord' symbolise la nature ordinale du nombre et permet de ne pas
le confondre avec les alias d'entiers naturel (0, 1, 2, ...) qui
sont utilisés en lambda calcul.

L'opérateur {...} permet d'effectuer des calculs simple avec
les ordinaux. Cet opérateur est utilisable dans tous les endroits
où un ordinale peut être utilisé.

Exemple :
	!f x. f^{ord1+ord3} x

Les seules opération arithmétiques autorisées sur les ordinaux sont :
 - addition : +
 - soustraction : -
 - division entière : /
 - multiplication : *
 - modulo : %

De plus la priorisation des calculs dans {...} par des parenthèses
est aussi autorisée.

Exemple :
	!f x.f^{(ord1 + ord3) % ord2} x <=> !f x.f^ord0 x <=> !f x.x

/// /////////// ///
/// Conversions ///
/// /////////// ///

L'ALPHA CONVERSION est simplement la possibilité de remplacer une
variable liée dans une abstraction par une autre sans que cela n'
en change la sémantique (le résultat). On dira que deux expressions
qui peuvent être interverties par une alpha conversion sont alpha
équivalentes.

Exemple :
        !x.fx <=> !y.fy

Il s'agit donc d'une simple substitution. En effet, la variable
liée étant dépendante du scope déterminé par l'abstraction, elle
sera de toute façon remplacer par sa valeur effective lors des
béta réductions (évaluation de l'expression).


La BETA REDUCTION est le mécanisme permettant d'évaluer une lambda
expression par remplacement des variables liées d'une abstraction
par sa valeur effective dans l'expression. Il s'agit de remplacer
la première des variables liées de la signature de l'abstraction
avec le premier des lambdas termes sur lesquels l'abstraction s'
applique !

Exemple :
        (!x.f x) f => f f (remplacement de x par f).
        (!x y z.f x y y z) g h => (!y z.f g y y z) h => !z.f g h h z


Cette mécanique est donc la base de l'évaluation des lambda
expression. /!\ Dans certains cas, il conviendra de passer par
une alpha-conversion pour modifier le nom d'une variable liée
afin de conserver la sémantique de l'expression. (... explications ...)


L'ETA REDUCTION permet d'éliminer une abstraction superflue à condition
que les variables liées de l'abstraction n'apparaissent pas dans le reste
de la lambda expression.
Ou bien dans l'autre sens, s'il y a besoins d'une évaluation retardée
il peut s'agir de rajouter une abstraction autour d'un lambda terme.

Exemple :
		(!x.f x) <=> (f)


/// //////////////////////// ///
/// Les Génératrices d'alias ///
/// //////////////////////// ///


Une GENERATRICE est un mécanisme permettant de mettre en place
au moyens d'un système de macro sophistiqué, un dictionnaire d'
alias qui sera disponible pour une utilisation ultérieure.

Exemple :
	number... : "[0-9]+" : !f x. f^ord"alias" x


Une génératrice se décompose en trois parties :
 - l'identifiant ellipsé
 - le patron d'alias (expression régulière)
 - la lambda expression

L'IDENTIFIANT ELLIPSE est simplement un identifiant de groupement
des alias qui seront créés par la génératrice. Utile principalement
pour la maintenance et la lisibilité du code. Cet identifiant n'est
pas une mécanique de catégorie (présentée plus loin).


Le PATRON D'ALIAS est la définition par expression régulière
de ce que les alias qui seront créés pourront être. Quand l'
interpréteur rencontrera un alias non connu directement, il
explorera la liste des génératrices (des patrons d'alias) et
identifiera l'unique occurence à laquelle l'alias rencontré
matchera. Si plusieurs matching sont obtenus, une alerte doit
être soulevée et l'alias est donc ambigue et non utilisable.


La LAMBDA EXPRESSION est simplement une expression lambda quelconque
qui permet de spécifier l'alias. Il y a cependant des subtilités
supplémentaires autorisées :
 - mot clé "alias" (cf. Mot clé "alias")
 - concaténation de chaine (cf. Chaines d'alias)
 - calcul d'ordinals (cf. Ordinaux et compisition)
 

/// /////////////// ///
/// Mot clé "alias" ///
/// /////////////// ///


Dans une définition d'alias, le mot clé 'alias' permet de faire
référence à l'alias lui même. Il s'agit simplement d'une macro qui
remplacé le plus tot possible par l'interpréteur par la valeur de
l'alias en cours de définition.

Exemple :
	foo : !f x. f alias x <=> !f x.f foo x (peu d'intérêt !)

	dans le cas d'une génératrice :
	     number... : "[0-9]+" : !f x. f^ord"alias" x
	'alias' sera replacé par l'alias qui matchera avec
	le patron d'alias de la génératrice.


/// /////////////// ///
/// Chaines d'alias ///
/// /////////////// ///

Une CHAINE D'ALIAS a pour vocation de permettre la concaténation
de chaines de caractère et d'alias pour composer des alias plus
complexes ou calculés (à l'aide des calculs sur ordinaux).

la concaténation se fait par l'opérateur "". On peut concatener :
 - un alias et une chaine
 - une chaine et un alias
 - une chaine et une autre chaine

Exemple :
	!f x.f^ord"{ord12-ord6}" x <=> !f x.f^ord6 x 
	!f x.f^"ord"2 x <=> !f x.f^ord2 x
	!f x.f^"ord""2" x <=> !f x.f^ord2 x
	!f x.f^ord"{ord1+ord1}"0 x <=> !f x.f^ord20 x

Dans une chaine d'alias, le mot clé 'alias' est transformé en sa
valeur avant l'évaluation de la chaine.


/// //////////////// ///
/// Mot clé 'native' ///
/// //////////////// ///

Le mot clé 'native' qualifie une définition d'alias.

Exemple :
	native 1 : !f x.f x

Il permet de signifier à l'interpréteur que l'alias (ou génératrice)
en cours de définition sera à voir comme un élément natif du lambda
calcul.

L'utilisation de ce mot clé sur un alias enverra donc celui dans une
liste d'alias spécifique qui permettra à l'interpréteur de passer d'une
abstraction vers son alias. 
...

Exemple :
	native number... : "[0-9]+" : !f x.f^ord"alias" x



/// ///////////////// ///
/// Métaprogrammation ///
/// ///////////////// ///

La métaprogrammation couplé au lambda calcul est le fondement même
de ce langage. Sans ça, on pourrait tout à fait se rebattre sur
Haskell, Lisp ou autres... La métaprogrammation est faite par
template d'alias (patron). Syntaxiquement proche de ce que propose
le C++14 en la matière.

Un template commencera toujours par le mot clé 'template' et par
une liste de métaparamêtre entre '<...>' et séparé par des virgules.

Exemple :
	template<alias F, alias G>
	...

S'en suit, la définition de l'alias qui sera paramêtrée par les
metaparamêtres du template.

Exemple :
	template <alias F, alias G>
	compose : !F G x.F (G (x))

/// /// //////////////////////// ///
/// /// Types des métaparamêtres ///
/// /// //////////////////////// ///

Un métaparamêtre peut être d'un des types suivants :
 - alias
 - category
 - native
 - ordinal
 - ? template ?

